name: "Setup Multiple Language Environments"
description:
  "Set up tools e.g Python, Node.js, Go, Java, and Terraform using standard
  setup actions"

inputs:
  python:
    description: "Python version (e.g. 3.11)"
    required: false
  node:
    description: "Node.js version (e.g. 18)"
    required: false
  yarn:
    description: "Yarn version (e.g. 1.22.22)"
    required: false
  go:
    description: "Go version (e.g. 1.22)"
    required: false
  java:
    description:
      "Java version with distribution (e.g. 8.0.442-tem) which is the same as in
      .sdkmanrc"
    required: false
  terraform:
    description: "Terraform version (e.g. 1.6.6)"
    required: false

runs:
  using: composite
  steps:
    # Detect version for Python from input or common version files.
    # This step enables conditional execution of the setup action,
    # either when a version is explicitly provided or when a known version file exists.
    - id: detect-python
      shell: bash
      run: |
        if [ -n "${{ inputs.python }}" ]; then
          echo "VERSION=${{ inputs.python }}" >> $GITHUB_OUTPUT
        elif [ -f .python-version ]; then
          echo "VERSION=$(cat .python-version)" >> $GITHUB_OUTPUT
        else
          echo "VERSION=" >> $GITHUB_OUTPUT
        fi

    - name: Setup Python
      if: steps.detect-python.outputs.VERSION != ''
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.detect-python.outputs.VERSION }}

    # Detect version for Node from input or common version files.
    # This step enables conditional execution of the setup action,
    # either when a version is explicitly provided or when a known version file exists.
    - id: detect-node
      shell: bash
      run: |
        if [ -n "${{ inputs.node }}" ]; then
          echo "VERSION=${{ inputs.node }}" >> $GITHUB_OUTPUT
        elif [ -f .node-version ]; then
          echo "VERSION=$(cat .node-version)" >> $GITHUB_OUTPUT
        elif [ -f .nvmrc ]; then
          echo "VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT
        else
          echo "VERSION=" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js
      if: steps.detect-node.outputs.VERSION != ''
      uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.detect-node.outputs.VERSION }}

    # Detects if yarn is being used as package manager
    # This step enables conditional execution of the setup action,
    # either when a version is explicitly provided or when a `yarn.lock` file exists.
    # Right now, we only support installing yarn v1.x if the version is not explicitly provided.
    - id: detect-yarn
      shell: bash
      run: |
        if [ -n "${{ inputs.yarn }}" ]; then
          echo "VERSION=${{ inputs.yarn }}" >> $GITHUB_OUTPUT
        elif [ -f yarn.lock ]; then
          echo "LOCK_FILE=yarn.lock" >> $GITHUB_OUTPUT
        else
          echo "VERSION=" >> $GITHUB_OUTPUT
          echo "LOCK_FILE=" >> $GITHUB_OUTPUT
        fi

    - name: Setup Yarn
      shell: bash
      run: |
        if [ -n "${{ steps.detect-yarn.outputs.VERSION }}" ]; then
          npm install -g yarn@${{ steps.detect-yarn.outputs.VERSION }}
        elif [ -n "${{ steps.detect-yarn.outputs.LOCK_FILE }}" ]; then
          npm install -g yarn
        fi

    # Detect version for Go from input or common version files.
    # This step enables conditional execution of the setup action,
    # either when a version is explicitly provided or when a known version file exists.
    - id: detect-go
      shell: bash
      run: |
        if [ -n "${{ inputs.go }}" ]; then
          echo "VERSION=${{ inputs.go }}" >> $GITHUB_OUTPUT
        elif [ -f .go-version ]; then
          echo "VERSION=$(cat .go-version)" >> $GITHUB_OUTPUT
        elif [ -f go.mod ]; then
          echo "VERSION_FILE=go.mod" >> $GITHUB_OUTPUT
        elif [ -f go.work ]; then
          echo "VERSION_FILE=go.work" >> $GITHUB_OUTPUT
        else
          echo "VERSION=" >> $GITHUB_OUTPUT
          echo "VERSION_FILE=" >> $GITHUB_OUTPUT
        fi

    - name: Setup Go (from input)
      if: steps.detect-go.outputs.VERSION != ''
      uses: actions/setup-go@v5
      with:
        go-version: ${{ steps.detect-go.outputs.VERSION }}
        cache: false

    # since go versions are defined in different formats, it's better to let setup-go to handle it
    - name: Setup Go (from version file)
      if:
        steps.detect-go.outputs.VERSION == '' &&
        steps.detect-go.outputs.VERSION_FILE != ''
      uses: actions/setup-go@v5
      with:
        go-version-file: ${{ steps.detect-go.outputs.VERSION_FILE }}
        cache: false

    # Detect version for Java from input or common version files.
    # This step enables conditional execution of the setup action,
    # either when a version is explicitly provided or when a known version file exists.
    - id: detect-java
      shell: bash
      run: |
        if [ -n "${{ inputs.java }}" ]; then
          JAVA_VER="${{ inputs.java }}"
        elif [ -f .sdkmanrc ]; then
          JAVA_LINE=$(grep '^java=' .sdkmanrc | head -n1 | tr -d '[:space:]')
          if [[ "$JAVA_LINE" =~ ^java=.+$ ]]; then
            JAVA_VER="${JAVA_LINE#java=}"
          fi
        fi

        if [ -n "$JAVA_VER" ]; then
          # Extract base version (e.g., 17.0.2) and distribution suffix (e.g., tem)
          if [[ "$JAVA_VER" == *-* ]]; then
            JAVA_VERSION="${JAVA_VER%-*}"
            JAVA_DIST="${JAVA_VER##*-}"
          else
            JAVA_VERSION="$JAVA_VER"
            JAVA_DIST=""
          fi

          echo "VERSION=$JAVA_VERSION" >> $GITHUB_OUTPUT

          # Map known SDKMAN suffixes to setup-java distribution keywords
          case "$JAVA_DIST" in
            tem) JAVA_DISTRIBUTION="temurin" ;;
            zulu) JAVA_DISTRIBUTION="zulu" ;;
            adpt) JAVA_DISTRIBUTION="adopt" ;;
            openj9) JAVA_DISTRIBUTION="adopt-openj9" ;;
            librca) JAVA_DISTRIBUTION="liberica" ;;
            ms) JAVA_DISTRIBUTION="microsoft" ;;
            amzn) JAVA_DISTRIBUTION="corretto" ;;
            sem) JAVA_DISTRIBUTION="semeru" ;;
            oracle) JAVA_DISTRIBUTION="oracle" ;;
            dragonwell) JAVA_DISTRIBUTION="dragonwell" ;;
            sapmchn) JAVA_DISTRIBUTION="sapmachine" ;;
            graalce) JAVA_DISTRIBUTION="graalvm" ;;
            jbr) JAVA_DISTRIBUTION="jetbrains" ;;
            *) JAVA_DISTRIBUTION="$JAVA_DIST" ;; # Use as-is
          esac

          echo "DISTRIBUTION=$JAVA_DISTRIBUTION" >> $GITHUB_OUTPUT
        else
          echo "VERSION=" >> $GITHUB_OUTPUT
        fi

    - name: Setup Java
      id: setup-java
      if: steps.detect-java.outputs.VERSION != ''
      uses: actions/setup-java@v4
      with:
        distribution: ${{ steps.detect-java.outputs.DISTRIBUTION }}
        java-version: ${{ steps.detect-java.outputs.VERSION }}

    - name: Export JAVA_HOME for subsequent steps
      shell: bash
      if: steps.detect-java.outputs.VERSION != ''
      run: echo "JAVA_HOME=${{ steps.setup-java.outputs.path }}" >> $GITHUB_ENV

    # Detect version for Terraform from input or common version files.
    # This step enables conditional execution of the setup action,
    # either when a version is explicitly provided or when a known version file exists.
    - id: detect-terraform
      shell: bash
      run: |
        if [ -n "${{ inputs.terraform }}" ]; then
          echo "VERSION=${{ inputs.terraform }}" >> $GITHUB_OUTPUT
        elif [ -f .terraform-version ]; then
          echo "VERSION=$(cat .terraform-version)" >> $GITHUB_OUTPUT
        else
          echo "VERSION=" >> $GITHUB_OUTPUT
        fi

    - name: Setup Terraform
      if: steps.detect-terraform.outputs.VERSION != ''
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ steps.detect-terraform.outputs.VERSION }}
#        terraform_wrapper: false
