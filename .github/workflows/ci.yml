name: "CI"
on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: open-turo/actions-gha/lint@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  fast:
    name: Test / Fast
    runs-on: ubuntu-latest
    steps:
      - uses: open-turo/actions-gha/test@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          TEST_FAST: "1"

  # Runs unit tests
  test:
    name: Test
    needs: [lint, fast]
    runs-on: ubuntu-latest
    steps:
      - uses: open-turo/actions-gha/test@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Build and run the action from this repo to test full functionality
  action:
    name: Test / Inputs
    needs: [lint, fast]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/action-test
        with:
          use-versions: false
        env:
          IGNORE_INSTALLED: "true"

  # Build and run the action from this repo to test full functionality
  action-versions:
    name: Test / Version files
    needs: [lint, fast]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/action-test
        with:
          use-versions: true
        env:
          IGNORE_INSTALLED: "true"

  action-asdf:
    name: Test / Pre-installed
    needs: [lint, fast]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          # Create .tool-versions for asdf
          {
          echo "golang 1.17.6"
          echo "java temurin-17.0.2+8"
          echo "nodejs 16.13.2"
          echo "python 3.10.2"
          echo "terraform 1.1.5"
          } > .tool-versions
      - uses: asdf-vm/actions/install@v1
      - run: |
          # Test versions
          go version | grep "1.17.6"
          java -version 2>&1 | grep "17.0.2"
          node --version | grep "16.13.2"
          python --version || grep "3.10.2"
          terraform --version | grep "1.1.5"
      - uses: ./.github/actions/action-test
        env:
          TEST_PRE_INSTALL: "true"
      - run: |
          # Test versions again
          go version | grep "1.17.6"
          java -version 2>&1 | grep "17.0.2"
          node --version | grep "16.13.2"
          python --version || grep "3.10.2"
          terraform --version | grep "1.1.5"
  # Build and run the action from this repo to test full functionality
  action-regression:
    name: Test / Regression / setEnv
    needs: [lint, fast]
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: 3.9.13
    steps:
      - uses: actions/checkout@v3
      - name: Install pyenv on hosted runner, unconfigured
        run: curl https://pyenv.run | bash
      - name: Create version files
        run: echo "${PYTHON_VERSION}" > .python-version
      - name: Setup python
        uses: actions/setup-python@v4
      - name: Run action using version files
        uses: ./
      - name: Expect a Python failure from pyenv
        shell: bash
        run: |
          # Check versions
          output="$(python --version)"
          echo "::debug::python --version: $output"
          echo "$output" | grep -i "pyenv: version .* not installed" && \
            {
              echo "::error:: Expected python --version to work, hit pyenv instead."
              echo "::debug::$(pyenv versions)"
              echo "::debug::$(echo "$PATH" | tr ":" "\n")"
              exit 1
            }
          echo "Success!"
